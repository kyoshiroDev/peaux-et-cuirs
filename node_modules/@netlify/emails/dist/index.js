var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import fetch from "node-fetch";
import { NetlifyIntegrationError } from "@netlify/integrations";
export const sendEmail = (_a) => __awaiter(void 0, void 0, void 0, function* () {
    var { template } = _a, props = __rest(_a, ["template"]);
    if (typeof window !== "undefined") {
        throw new TypeError("Netlify Emails is not available in the browser, please use a Netlify Function.");
    }
    if (!process.env.NETLIFY_EMAILS_SECRET) {
        throw new Error("It does not look like Netlify Emails is enabled for this site.");
    }
    const response = yield fetch(`${process.env.URL}/.netlify/functions/emails/${template}`, {
        headers: {
            "netlify-emails-secret": process.env.NETLIFY_EMAILS_SECRET,
        },
        method: "POST",
        body: JSON.stringify(Object.assign({}, props)),
    });
    if (!response.ok) {
        const error = yield response.text();
        if (response.status >= 500) {
            throw new NetlifyIntegrationError(`An error occurred while sending the email - -${response.status} ${error}`);
        }
        else {
            throw new Error(`An error occurred while sending the email - ${response.status} - ${error}`);
        }
    }
});
